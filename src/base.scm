(begin
  (define (equal? . args)
    (if (c-= (c-length args) 2)
        ((lambda (obj1 obj2)
           (if (and (pair? obj1) (pair? obj2))
               (and (equal? (car obj1) (car obj2)) (equal? (cdr obj1) (cdr obj2)))
               (if (and (vector? obj1) (vector? obj2))
                   (equal? (vector->list obj1) (vector->list obj2))
                   (if (and (string? obj1) (string? obj2))
                       (equal? (string->list obj1) (string->list obj2))
                       (if (or (boolean? obj1)
                               (symbol? obj1)
                               (number? obj1)
                               (char? obj1)
                               (port? obj1)
                               (procedure? obj1)
                               (null? obj1))
                           (eqv? obj1 obj2)
                           #f)))))
         (car args) (car (cdr args)))
        (error "(equal?) wrong number of arguments --" args)))

  (define (= . args)
    (if (< 1 (c-length args))
        ((lambda ()
           (define (iter z rest)
             (if (null? rest)
                 #t
                 ((lambda (z0)
                    (if (number? z0)
                        (if (and (exact? z) (exact? z0))
                            (if (c-= z z0)
                                (iter z0 (cdr rest))
                                #f)
                            (if (c-= (inexact z) (inexact z0))
                                (iter z0 (cdr rest))
                                #f))
                        (error "(=) wrong type of argument --" args)))
                  (car rest))))
           (if (number? (car args))
               (iter (car args) (cdr args))
               (error "(=) wrong type of argument --" args))))
        (error "(=) wrong number of arguments --" args)))
  
  (define (+ . args)
    (define (iter zs result e?)
      (if (null? zs)
          result
          ((lambda (z)
             (if (number? z)
                 (if (and e? (exact? z))
                     (iter (cdr zs) (c-+ result z) e?)
                     (iter (cdr zs) (c-+ (inexact result) (inexact z)) #f))
                 (error "(+) wrong type of argument --" args)))
           (car zs))))
    (iter args 0 #t))

  (define (* . args)
    (define (iter zs result e?)
      (if (null? zs)
          result
          ((lambda (z)
             (if (number? z)
                 (if (and e? (exact? z))
                     (iter (cdr zs) (c-* result z) e?)
                     (iter (cdr zs) (c-* (inexact result) (inexact z)) #f))
                 (error "(*) wrong type of argument --" args)))
           (car zs))))
    (iter args 1 #t))
  
  (define (- . args)
    (if (= (c-length args) 1)
        (if (number? (car args))
            (* -1 (car args))
            (error "(-) wrong number of arguments --" args))
        (if (> (c-length args) 1)
            ((lambda ()
               (define (iter zs result e?)
                 (if (null? zs)
                     result
                     ((lambda (z)
                        (if (number? z)
                            (if (and e? (exact? z))
                                (iter (cdr zs) (c-- result z) e?)
                                (iter (cdr zs) (c-- (inexact result) (inexact z)) #f))
                            (error "(-) wrong type of argument --" args)))
                      (car zs))))
               (if (number? (car args))
                   (iter (cdr args) (car args) (exact? (car args)))
                   (error "(-) wrong type of argument --" args))))
            (error "(-) wrong number of arguments --" args))))

  (define (/ . args)
    (if (= (c-length args) 1)
        (if (number? (car args))
            (/ 1 (car args))
            (error "(/) wrong number of arguments --" args))
        (if (> (c-length args) 1)
            ((lambda ()
               (define (iter zs result e?)
                 (if (null? zs)
                     result
                     ((lambda (z)
                        (if (number? z)
                            (if (and e? (exact? z))
                                (iter (cdr zs) (c-/ result z) e?)
                                (iter (cdr zs) (c-/ (inexact result) (inexact z)) #f))
                            (error "(/) wrong type of argument --" args)))
                      (car zs))))
               (if (number? (car args))
                   (iter (cdr args) (car args) (exact? (car args)))
                   (error "(/) wrong type of argument --" args))))
            (error "(/) wrong number of arguments --" args))))
  
  (define (list? . args)
    (if (= (c-length args) 1)
        ((lambda (obj)
           (if (null? obj)
               #t
               (if (pair? obj)
                   (list? (cdr obj))
                   #f)))
         (car args))
        (error "(list?) wrong number of arguments --" args)))

  (define (length . args)
    (if (= (c-length args) 1)
        ((lambda (list)
           (if (list? list)
               ((lambda ()
                  (define (iter list n)
                    (if (null? list)
                        n
                        (iter (cdr list) (+ n 1))))
                  (iter list 0)))
               (error "(length) wrong type of argument --" args)))
         (car args))
        (error "(length) wrong number of arguments --" args)))

  (define (list->string . args)
    (if (= (c-length args) 1)
        ((lambda (list)
           (if (list? list)
               ((lambda ()
                  (define s (make-string (length list) #\A))
                  (define (iter list k s)
                    (if (null? list)
                        s
                        ((lambda (c)
                           (if (char? c)
                               ((lambda ()
                                  (string-set! s k c)
                                  (iter (cdr list) (+ k 1) s)))
                               (error "(list->string) wrong type of argument --" args)))
                         (car list))))
                  (iter list 0 s)))
               (error "(list->string) wrong type of argument --" args)))
         (car args))
        (error "(list->string) wrong number of arguments --" args)))

  ;; Pairs and lists
  (define (make-list . args)
    (if (and (< 0 (c-length args)) (< (c-length args) 3))
        ((lambda (k fill)
           (define (iter i result)
             (if (< i k)
                 (iter (+ i 1) (cons fill result))
                 result))
           (iter 0 '()))
         (car args) (if (null? (cdr args)) #f (cadr args)))
        (error "(make-list) wrong number of arguments --" args)))

  (define (memq . args)
    (if (= (c-length args) 2)
        ((lambda (obj list)
           (if (list? list)
               (if (null? list)
                   #f
                   (if (eq? obj (car list) )
                       list
                       (memq obj (cdr list))))
               (error "(memq) wrong type of argument --" args)))
         (car args) (cadr args))
        (error "(memq) wrong number of arguments --" args)))

  ;; (error "(xxx) wrong type of argument --" args)
  ;; (error "(xxx) wrong number of arguments --" args)
  (define (caar pair) (car (car pair)))
  (define (cadr pair) (car (cdr pair)))
  (define (cdar pair) (cdr (car pair)))
  (define (cddr pair) (cdr (cdr pair)))
  (define (caaar pair) (car (car (car pair))))
  (define (caadr pair) (car (car (cdr pair))))
  (define (cadar pair) (car (cdr (car pair))))
  (define (caddr pair) (car (cdr (cdr pair))))
  (define (cdaar pair) (cdr (car (car pair))))
  (define (cdadr pair) (cdr (car (cdr pair))))
  (define (cddar pair) (cdr (cdr (car pair))))
  (define (cdddr pair) (cdr (cdr (cdr pair))))
  (define (caaaar pair) (car (car (car (car pair)))))
  (define (caaadr pair) (car (car (car (cdr pair)))))
  (define (caadar pair) (car (car (cdr (car pair)))))
  (define (caaddr pair) (car (car (cdr (cdr pair)))))
  (define (cadaar pair) (car (cdr (car (car pair)))))
  (define (cadadr pair) (car (cdr (car (cdr pair)))))
  (define (caddar pair) (car (cdr (cdr (car pair)))))
  (define (cadddr pair) (car (cdr (cdr (cdr pair)))))
  (define (cdaaar pair) (cdr (car (car (car pair)))))
  (define (cdaadr pair) (cdr (car (car (cdr pair)))))
  (define (cdadar pair) (cdr (car (cdr (car pair)))))
  (define (cdaddr pair) (cdr (car (cdr (cdr pair)))))
  (define (cddaar pair) (cdr (cdr (car (car pair)))))
  (define (cddadr pair) (cdr (cdr (car (cdr pair)))))
  (define (cdddar pair) (cdr (cdr (cdr (car pair)))))
  (define (cddddr pair) (cdr (cdr (cdr (cdr pair)))))
  (define (reverse list)
    (define (iter list result)
      (if (null? list)
          result
          (iter (cdr list) (cons (car list) result))))
    (iter list '()))
  (define (append . list-of-list)
    (if (null? list-of-list)
        '()
        ((lambda (reversed)
           ((lambda (o)
              (if (or (null? o) (pair? o))
                  ((lambda ()
                     (define (iter-1 list result)
                       (if (null? list)
                           result
                           (iter-1 (cdr list)
                                   (cons (car list) result))))
                     (define (iter-2 list-of-list result)
                       (if (null? list-of-list)
                           result
                           (iter-2 (cdr list-of-list)
                                   (iter-1 (reverse (car list-of-list))
                                           result))))
                     (iter-2 (cdr reversed) o)))
                  o))
            (car reversed)))
         (reverse list-of-list))))
  (define (string->list string . rest)
    (define start (if (null? rest) 0 (car rest)))
    (define end (if (or (null? rest) (null? (cdr rest)))
                    (string-length string)
                    (cadr rest)))
    (define (iter i result)       
      (if (< i start)
          result
          (iter (- i 1)
                (cons (string-ref string i) result))))
    (iter (- end 1) '()))

  (define (string-append . list-of-string)     
    (define (iter list-of-string result)
      (if (null? list-of-string)
          result
          (iter (cdr list-of-string)
                (append result (string->list (car list-of-string))))))
    (list->string (iter list-of-string '())))
  (define (newline . args)
    ((lambda (port)
       (display #\newline port))
     (if (null? args) (current-output-port) (car args))))
  )
