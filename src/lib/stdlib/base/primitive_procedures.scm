(begin
  (define (* . args)
    (define (iter zs result e?)
      (if (c-null? zs)
          result
          ((lambda (z)
             (if (c-number? z)
                 (if (and e? (c-exact? z))
                     (iter (c-cdr zs)
                           (c-* result z)
                           e?)
                     (iter (c-cdr zs)
                           (c-* (c-inexact result) (c-inexact z))
                           #f))
                 (error '|(*) wrong type of argument --| args)))
           (c-car zs))))
    (iter args 1 #t))
  (define (+ . args)
    (define (iter zs result e?)
      (if (c-null? zs)
          result
          ((lambda (z)
             (if (c-number? z)
                 (if (and e? (c-exact? z))
                     (iter (c-cdr zs)
                           (c-+ result z)
                           e?)
                     (iter (c-cdr zs)
                           (c-+ (c-inexact result) (c-inexact z))
                           #f))
                 (error '|(+) wrong type of argument --| args)))
           (c-car zs))))
    (iter args 0 #t))
  (define (- . args)
    (define len (c-length args))
    (if (c-= len 0)
        (error '|(-) wrong number of arguments --| args)
        (if (c-= len 1)
            (if (c-number? (c-car args))
                (if (c-exact? (c-car args))
                    (c-* -1 (c-car args))
                    (c-* (c-inexact -1) (c-car args)))
                (error '|(-) wrong type of argument --| args))
            (begin
              (define (iter nums result e?)
                (if (c-null? nums)
                    result
                    (if (c-number? (c-car nums))
                        (if (and e? (c-exact? (c-car nums)))
                            (iter (c-cdr nums)
                                  (c-- result (c-car nums))
                                  #t)
                            (iter (c-cdr nums)
                                  (c-- (c-inexact result)
                                       (c-inexact (c-car nums)))
                                  #f))
                        (error '|(-) wrong type of argument --| args))))
              (iter (c-cdr args) (c-car args) (c-exact? (c-car args)))))))
  (define (/ . args)
    (define len (c-length args))
    (if (c-= len 0)
        (error '|(/) wrong number of arguments --| args)
        (if (c-= len 1)
            (if (c-number? (c-car args))
                (if (c-exact? (c-car args))
                    (c-/ 1 (c-car args))
                    (c-/ (c-inexact 1) (c-car args)))
                (error '|(/) wrong type of argument --| args))
            (begin
              (define (iter nums result e?)
                (if (c-null? nums)
                    result
                    (if (c-number? (c-car nums))
                        (if (and e? (c-exact? (c-car nums)))
                            (if (c-= (c-car nums) 0)
                                (error '|(/) division by zero --| args)
                                (iter (c-cdr nums)
                                      (c-/ result (c-car nums))
                                      #t))
                            (iter (c-cdr nums)
                                  (c-/ (c-inexact result)
                                       (c-inexact (c-car nums)))
                                  #f))
                        (error '|(/) wrong type of argument --| args))))
              (iter (c-cdr args) (c-car args) (c-exact? (c-car args)))))))
  (define (< . args)
    (define len (c-length args))
    (if (c-< len 2)
        (error '|(<) wrong number of arguments --| args)
        (begin
          (if (c-real? (c-car args))
              (begin
                (define (cmp x y)
                  (if (and (c-exact? x) (c-exact? y))
                      (c-< x y)
                      (c-< (c-inexact x) (c-inexact y))))
                (define (iter x xs)
                  (if (c-null? xs)
                      #t
                      (if (c-real? (c-car xs))
                          (if (cmp x (c-car xs))
                              (iter (c-car xs) (c-cdr xs))
                              #f)
                          (error '|(<) wrong type of argument --| args))))
                (iter (c-car args) (c-cdr args)))
              (error '|(<) wrong type of argument --| args)))))
  (define (<= . args)
    (define len (c-length args))
    (if (c-< len 2)
        (error '|(<=) wrong number of arguments --| args)
        (begin
          (if (c-real? (c-car args))
              (begin
                (define (cmp x y)
                  (if (and (c-exact? x) (c-exact? y))
                      (or (c-= x y) (c-< x y))
                      (or (c-= (c-inexact x) (c-inexact y))
                          (c-< (c-inexact x) (c-inexact y)))))
                (define (iter x xs)
                  (if (c-null? xs)
                      #t
                      (if (c-real? (c-car xs))
                          (if (cmp x (c-car xs))
                              (iter (c-car xs) (c-cdr xs))
                              #f)
                          (error '|(<=) wrong type of argument --| args))))
                (iter (c-car args) (c-cdr args)))
              (error '|(<=) wrong type of argument --| args)))))
  (define (= . args)
    (define len (c-length args))
    (if (c-< len 2)
        (error '|(=) wrong number of arguments --| args)
        (begin
          (if (c-number? (c-car args))
              (begin
                (define (cmp x y)
                  (if (and (c-exact? x) (c-exact? y))
                      (c-= x y)
                      (c-= (c-inexact x) (c-inexact y))))
                (define (iter x xs)
                  (if (c-null? xs)
                      #t
                      (if (c-number? (c-car xs))
                          (if (cmp x (c-car xs))
                              (iter (c-car xs) (c-cdr xs))
                              #f)
                          (error '|(=) wrong type of argument --| args))))
                (iter (c-car args) (c-cdr args)))
              (error '|(=) wrong type of argument --| args)))))
  (define (> . args)
    (define len (c-length args))
    (if (c-< len 2)
        (error '|(>) wrong number of arguments --| args)
        (begin
          (if (c-real? (c-car args))
              (begin
                (define (cmp x y)
                  (if (and (c-exact? x) (c-exact? y))
                      (c-< y x)
                      (c-< (c-inexact y) (c-inexact x))))
                (define (iter x xs)
                  (if (c-null? xs)
                      #t
                      (if (c-real? (c-car xs))
                          (if (cmp x (c-car xs))
                              (iter (c-car xs) (c-cdr xs))
                              #f)
                          (error '|(>) wrong type of argument --| args))))
                (iter (c-car args) (c-cdr args)))
              (error '|(>) wrong type of argument --| args)))))
  (define (>= . args)
    (define len (c-length args))
    (if (c-< len 2)
        (error '|(>=) wrong number of arguments --| args)
        (begin
          (if (c-real? (c-car args))
              (begin
                (define (cmp x y)
                  (if (and (c-exact? x) (c-exact? y))
                      (or (c-= x y) (c-< y x))
                      (or (c-= (c-inexact x) (c-inexact y))
                          (c-< (c-inexact y) (c-inexact x)))))
                (define (iter x xs)
                  (if (c-null? xs)
                      #t
                      (if (c-real? (c-car xs))
                          (if (cmp x (c-car xs))
                              (iter (c-car xs) (c-cdr xs))
                              #f)
                          (error '|(>=) wrong type of argument --| args))))
                (iter (c-car args) (c-cdr args)))
              (error '|(>=) wrong type of argument --| args)))))
  (define (abs . args)
    (if (c-= (c-length args) 1)
        (if (c-real? (c-car args))
            (if (c-< (c-car args) 0)
                (c-* -1 (c-car args))
                (c-car args))
            (error '|(abs) wrong type of argument --| args))
        (error '|(abs) wrong number of arguments --| args)))
  (define (append . list-of-list)
    (if (c-null? list-of-list)
        '()
        (begin
          (define reversed (c-reverse list-of-list))
          (define o (c-car reversed))
          (if (or (c-null? o) (c-pair? o))
              (begin
                (define (iter-1 list result)
                  (if (c-null? list)
                      result
                      (iter-1 (c-cdr list)
                              (c-cons (c-car list) result))))
                (define (iter-2 list-of-list result)
                  (if (c-null? list-of-list)
                      result
                      (if (c-list? (c-car list-of-list))
                          (iter-2 (c-cdr list-of-list)
                                  (iter-1 (c-reverse (c-car list-of-list))
                                          result))
                          (error '|(append) wrong type of argument --| args))))
                (iter-2 (c-cdr reversed) o))
              o))))

  (define (binary-port? . args)
    (if (c-= (c-length args) 1)
        (c-binary-port? (c-car args))
        (error '|(binary-port?) wrong number of arguments --| args)))
  
  (define (boolean=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define boolean (c-car args))
          (if (c-boolean? boolean)
              (begin
                (define (iter booleans)
                  (if (c-null? booleans)
                      #t
                      (if (c-boolean? (c-car booleans))
                          (if (c-eq? (c-car booleans) boolean)
                              (iter (c-cdr booleans))
                              #f)
                          (error '|(boolean=?) wrong type of argument --|
                                 args))))
                (iter (c-cdr args)))
              (error '|(boolean=?) wrong type of argument --| args)))
        (error '|(boolean=?) wrong number of arguments --| args)))
  
  (define (boolean? . args)
    (if (c-= (c-length args) 1)
        (c-boolean? (c-car args))
        (error '|(boolean?) wrong number of arguments --| args)))

  (define (bytevector . args)
    (define (byte? o) (and (c-integer? o) (c-exact? o) (c-< -1 o) (c-< o 256)))
    (define (bytes? bytes)
      (if (c-null? bytes)
          #t
          (if (byte? (c-car bytes))
              (bytes? (c-cdr bytes))
              #f)))
    (if (bytes? args)
        (c-apply c-bytevector args)
        (error '|(bytevector) wrong type of argument --| args)))

  (define (bytevector-append . args)
    (define (bytevectors? bytevectors)
      (if (c-null? bytevectors)
          #t
          (if (c-bytevector? (c-car bytevectors))
              (bytevectors? (c-cdr bytevectors))
              #f)))
    (if (bytevectors? args)
        (c-apply c-bytevector-append args)
        (error '|(bytevector-append) wrong type of argument --| args)))
  (define (bytevector-copy . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< len 4))
        (begin
          (define bytevector (c-car args))
          (if (c-bytevector? bytevector)
              (begin
                (define bytevector-len (c-bytevector-length bytevector))
                (define start (if (c-= len 1)
                                  0
                                  (c-cadr args)))
                (define end (if (c-< len 3)
                                bytevector-len
                                (c-caddr args)))
                (if (and (c-integer? start) (c-exact? start)
                         (c-integer? end) (c-exact? end)
                         (c-< -1 start) (c-< end (c-+ bytevector-len 1))
                         (c-< start end))
                    (c-bytevector-copy bytevector start end)
                    (error '|(bytevector-copy) wrong type of argument --| args)))
              (error '|(bytevector-copy) wrong type of argument --| args)))
        (error '|(bytevector-copy) wrong number of arguments --| args)))
  (define (bytevector-length . args)
    (if (c-= (c-length args) 1)
        (if (c-bytevector? (c-car args))
            (c-bytevector-length (c-car args))
            (error '|(bytevector-length) wrong type of argument --| args))
        (error '|(bytevector-length) wrong number of arguments --| args)))

  (define (bytevector-u8-ref . args)
    (if (c-= (c-length args) 2)
        (begin
          (define bv (c-car args))
          (define k (c-cadr args))
          (if (and (c-bytevector? bv)
                   (c-integer? k)
                   (c-exact? k)
                   (c-< -1 k)
                   (c-< k (c-bytevector-length bv)))
              (c-bytevector-u8-ref bv k)
              (error '|(bytevector-u8-ref) wrong type of argument --| args)))
        (error '|(bytevector-u8-ref) wrong number of arguments --| args)))
  (define (bytevector-u8-set! . args)
    (if (c-= (c-length args) 3)
        (begin
          (define bv (c-car args))
          (define k (c-cadr args))
          (define byte (c-caddr args))
          (if (and (c-bytevector? bv)
                   (c-integer? k)
                   (c-exact? k)
                   (c-< -1 k)
                   (c-< k (c-bytevector-length bv)))
              (c-bytevector-u8-set! bv k byte)
              (error '|(bytevector-u8-set!) wrong type of argument --| args)))
        (error '|(bytevector-u8-set!) wrong number of arguments --| args)))
  (define (bytevector? . args)
    (if (c-= (c-length args) 1)
        (c-bytevector? (c-car args))
        (error '|(bytevector?) wrong number of arguments --| args)))
  
  (define (car . args)
    (if (= (c-length args) 1)
        (if (c-pair? (c-car args))
            (c-car (c-car args))
            (error '|(car) wrong type of argument --| args))
        (error '|(car) wrong number of arguments --| args)))
  
  (define (cdr . args)
    (if (= (c-length args) 1)
        (if (c-pair? (c-car args))
            (c-cdr (c-car args))
            (error '|(cdr) wrong type of argument --| args))
        (error '|(cdr) wrong number of arguments --| args)))
  
  (define (ceiling . args)
    (if (c-= (c-length args) 1)
        (if (c-real? (c-car args))
            (c-ceiling (c-car args))
            (error '|(ceiling) wrong type of argument --| args))
        (error '|(ceiling) wrong number of arguments --| args)))

  (define (char->integer . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char->integer (c-car args))
            (error '|(char->integer) wrong type of argument --| args))
        (error '|(char->integer) wrong number of arguments --| args)))

  (define (char<=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char<=? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char<=?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char<=?) wrong type of argument --| args)))
        (error '|(char<=?) wrong number of arguments --| args)))
  (define (char<? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char<? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char<?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char<?) wrong type of argument --| args)))
        (error '|(char<?) wrong number of arguments --| args)))
  (define (char=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char=? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char=?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char=?) wrong type of argument --| args)))
        (error '|(char=?) wrong number of arguments --| args)))
  (define (char>=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char>=? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char>=?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char>=?) wrong type of argument --| args)))
        (error '|(char>=?) wrong number of arguments --| args)))
  (define (char>? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char>? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char>?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char>?) wrong type of argument --| args)))
        (error '|(char>?) wrong number of arguments --| args)))
  
  (define (char? . args)
    (if (c-= (c-length args) 1)
        (c-char? (c-car args))
        (error '|(char?) wrong number of arguments --| args)))

  (define (close-input-port . args)
    (if (c-= (c-length args) 1)
        (if (c-input-port? (c-car args))
            (c-close-port (c-car args))
            (error '|(close-input-port) wrong type of argument --| args))
        (error '|(close-input-port) wrong number of arguments --| args)))

  (define (close-output-port . args)
    (if (c-= (c-length args) 1)
        (if (c-output-port? (c-car args))
            (c-close-port (c-car args))
            (error '|(close-output-port) wrong type of argument --| args))
        (error '|(close-output-port) wrong number of arguments --| args)))

  (define (close-port . args)
    (if (c-= (c-length args) 1)
        (if (c-port? (c-car args))
            (c-close-port (c-car args))
            (error '|(close-port) wrong type of argument --| args))
        (error '|(close-port) wrong number of arguments --| args)))

  (define (complex? . args)
    (if (c-= (c-length args) 1)
        (c-complex? (c-car args))
        (error '|(complex?) wrong number of arguments --| args)))
  
  (define (cons . args)
    (if (c-= (c-length args) 2)
        (c-cons (c-car args) (c-cadr args))
        (error '|(cons) wrong number of arguments --| args)))

  (define (current-error-port . args)
    (if (c-null? args)
        (c-current-error-port)
        (error '|(current-error-port) wrong number of arguments --| args)))
  
  (define (current-input-port . args)
    (if (c-null? args)
        (c-current-input-port)
        (error '|(current-input-port) wrong number of arguments --| args)))
  
  (define (current-output-port . args)
    (if (c-null? args)
        (c-current-output-port)
        (error '|(current-output-port) wrong number of arguments --| args)))

  (define (denominator . args)
    (if (c-= (c-length args) 1)
        (if (and (c-number? (c-car args)) (c-exact? (c-car args)))
            (c-denominator (c-car args))
            (error '|(denominator) wrong type of argument --| args))
        (error '|(denominator) wrong number of arguments --| args)))

  (define (eof-object . args)
    (if (c-null? args)
        (c-eof-object)
        (error '|(eof-object) wrong number of arguments --| args)))

  (define (eof-object? . args)
    (if (c-= (c-length args) 1)
        (c-eof-object? (c-car args))
        (error '|(eof-object?) wrong number of arguments --| args)))

  (define (eq? . args)
    (if (c-= (c-length args) 2)
        (c-eq? (c-car args) (c-cadr args))
        (error '|(eq?) wrong number of arguments --| args)))

  (define (eqv? . args)
    (if (c-= (c-length args) 2)
        (c-eqv? (c-car args) (c-cadr args))
        (error '|(eqv?) wrong number of arguments --| args)))

  (define (even? . args)
    (if (c-= (c-length args) 1)
        (if (c-integer? (c-car args))
            (c-even? (c-car args))
            (error '|(even?) wrong type of argument --| args))
        (error '|(even?) wrong number of arguments --| args)))

  (define (exact . args)
    (if (c-= (c-length args) 1)
        (if (and (c-real? (c-car args))
                 (c-finite? (c-car args)))
            (c-exact (c-car args))
            (error '|(exact) wrong type of argument --| args))
        (error '|(exact) wrong number of arguments --| args)))

  (define (exact? . args)
    (if (c-= (c-length args) 1)
        (if (c-number? (c-car args))
            (c-exact? (c-car args))
            (error '|(exact?) wrong type of argument --| args))
        (error '|(exact?) wrong number of arguments --| args)))

  (define (expt . args)
    (if (c-= (c-length args) 2)
        (if (and (c-number? (c-car args)) (c-number? (c-cadr args)))
            (if (and (c-exact? (c-car args))
                     (c-exact? (c-cadr args)))
                (c-expt (c-car args) (c-cadr args))
                (c-expt (c-inexact (c-car args))
                        (c-inexact (c-cadr args))))
            (error '|(expt) wrong type of argument --| args))
        (error '|(expt) wrong number of arguments --| args)))

  (define (floor . args)
    (if (c-= (c-length args) 1)
        (if (c-real? (c-car args))
            (c-floor (c-car args))
            (error '|(floor) wrong type of argument --| args))
        (error '|(floor) wrong number of arguments --| args)))

  (define (flush-output-port . args)
    (define len (c-length args))
    (if (c-< 1 len)
        (error '|(flush-output-port) wrong number of arguments --| args)
        (begin
          (define port (if (c-= len 0)
                           (c-current-output-port)
                           (c-car args)))
          (if (c-output-port? port)
              (c-flush-output-port port)
              (error '|(flush-output-port) wrong type of argument --| args)))))

  (define (gcd . args)
    (define (iter n nums e?)
      (if (c-null? nums)
          (if e?
              n
              (c-inexact n))
          (if (c-integer? (c-car nums))
              (if (and e? (c-exact? (c-car nums)))
                  (iter (c-gcd n (c-car nums))
                        (c-cdr nums)
                        e?)
                  (iter (c-gcd (c-exact n)
                               (c-exact (c-car nums)))
                        (c-cdr nums)
                        #f))
              (error '|(gcd) wrong type of argument --| args))))
    (iter 0 args #t))

  (define (inexact . args)
    (if (c-= (c-length args) 1)
        (if (c-number? (c-car args))
            (c-inexact (c-car args))
            (error '|(inexact) wrong type of argument --| args))
        (error '|(inexact) wrong number of arguments --| args)))

  (define (input-port-open? . args)
    (if (c-= (c-length args) 1)
        (if (c-input-port? (c-car args))
            (c-input-port-open? (c-car args))
            (error '|(input-port-open?) wrong type of argument --| args))
        (error '|(input-port-open?) wrong number of arguments --| args)))

  (define (input-port? . args)
    (if (c-= (c-length args) 1)
        (c-input-port? (c-car args))
        (error '|(input-port?) wrong number of arguments --| args)))

  (define (integer->char . args)
    (if (c-= (c-length args) 1)
        (begin
          (define n (c-car args))
          (if (and (c-integer? n)
                   (c-< -1 n)
                   (c-< n 4294967296))
              (c-integer->char n)
              (error '|(integer->char) wrong type of argument --| args)))
        (error '|(integer->char) wrong number of arguments --| args)))

  (define (integer? . args)
    (if (c-= (c-length args) 1)
        (c-integer? (c-car args))
        (error '|(integer?) wrong number of arguments --| args)))

  (define (lcm . args)
    (define (iter n nums e?)
      (if (c-null? nums)
          (if e?
              n
              (c-inexact n))
          (if (c-integer? (c-car nums))
              (if (and e? (c-exact? (c-car nums)))
                  (iter (c-lcm n (c-car nums))
                        (c-cdr nums)
                        e?)
                  (iter (c-lcm (c-exact n)
                               (c-exact (c-car nums)))
                        (c-cdr nums)
                        #f))
              (error '|(lcm) wrong type of argument --| args))))
    (iter 1 args #t))
  
  (define (length . args)
    (if (c-= (c-length args) 1)
        (if (c-list? (c-car args))
            (c-length (c-car args))
            (error '|(length) wrong type of argument --| args))
        (error '|(length) wrong number of arguments --| args)))
  
  (define (list . args) args)
  
  (define (list? . args)
    (if (c-= (c-length args) 1)
        (c-list? (c-car args))
        (error '|(list?) wrong number of arguments --| args)))

  (define (list->string . args)
    (if (c-= (c-length args) 1)
        (if (c-list? (c-car args))
            (begin
              (define (chars? list)
                (if (c-null? list)
                    #t
                    (if (c-char? (c-car list))
                        (chars? (c-cdr list))
                        #f)))
              (if (chars? (c-car args))
                  (c-list->string (c-car args))
                  (error '|(list->string) wrong type of argument --| args)))
            (error '|(list->string) wrong type of argument --| args))
        (error '|(list->string) wrong number of arguments --| args)))

  (define (make-bytevector . args)
    (define len (c-length args))
    (if (or (c-< len 1) (c-< 2 len))
        (error '|(make-bytevector) wrong number of arguments --| args)
        (begin
          (define k (c-car args))
          (define byte (if (c-= len 1)
                           0
                           (c-cadr args)))
          (if (and (c-integer? k) (c-exact? k) (c-< -1 k)
                   (c-integer? byte) (c-exact? byte)
                   (c-< -1 byte) (c-< byte 256))
              (c-make-bytevector k byte)
              (error '|(make-bytevector) wrong type of argument --| args)))))

  (define (make-list . args)
    (define len (c-length args))
    (if (or (c-< len 1) (c-< 2 len))
        (error '|(make-list) wrong number of arguments --| args)
        (begin
          (define k (c-car args))
          (define fill (if (c-= len 1)
                           '()
                           (c-cadr args)))
          (if (and (c-integer? k) (c-exact? k) (c-< -1 k))
              (c-make-list k fill)
              (error '|(make-list) wrong type of argument --| args)))))

  (define (make-string . args)
    (define len (c-length args))
    (if (or (c-< len 1) (c-< 2 len))
        (error '|(make-string) wrong number of arguments --| args)
        (begin
          (define k (c-car args))
          (define char (if (c-= len 1)
                           #\space
                           (c-cadr args)))
          (if (and (c-integer? k) (c-exact? k) (c-< -1 k))
              (c-make-string k char)
              (error '|(make-string) wrong type of argument --| args)))))

  (define (negative? . args)
    (if (c-= (c-length args) 1)
        (if (c-real? (c-car args))
            (c-negative? (c-car args))
            (error '|(negative?) wrong type of argument --| args))
        (error '|(negative?) wrong number of arguments --| args)))

  (define (newline . args)
    (define len (c-length args))
    (if (c-< len 2)
        (begin
          (define port (if (c-= len 1)
                           (c-car args)
                           (c-current-output-port)))
          (if (c-output-port? port)
              (c-newline port)
              (error '|(newline) wrong type of argument --| args)))
        (error '|(newline) wrong number of arguments --| args)))
  
  
  (define (null? . args)
    (if (c-= (c-length args) 1)
        (c-null? (c-car args))
        (error '|(null?) wrong number of arguments --| args)))

  (define (number? . args)
    (if (c-= (c-length args) 1)
        (c-number? (c-car args))
        (error '|(number?) wrong number of arguments --| args)))

  (define (numerator . args)
    (if (c-= (c-length args) 1)
        (if (c-exact? (c-car args))
            (c-numerator (c-car args))
            (error '|(numerator) wrong type of argument --| args))
        (error '|(numerator) wrong number of arguments --| args)))
  
  (define (odd? . args)
    (if (c-= (c-length args) 1)
        (if (c-integer? (c-car args))
            (c-odd? (c-car args))
            (error '|(odd?) wrong type of argument --| args))
        (error '|(odd?) wrong number of arguments --| args)))

  (define (output-port-open? . args)
    (if (c-= (c-length args) 1)
        (if (c-output-port? (c-car args))
            (c-output-port-open? (c-car args))
            (error '|(output-port-open?) wrong type of argument --| args))
        (error '|(output-port-open?) wrong number of arguments --| args)))

  (define (output-port? . args)
    (if (c-= (c-length args) 1)
        (c-output-port? (c-car args))
        (error '|(output-port?) wrong number of arguments --| args)))

  (define (pair? . args)
    (if (c-= (c-length args) 1)
        (c-pair? (c-car args))
        (error '|(pair?) wrong number of arguments --| args)))

  (define (port? . args)
    (if (c-= (c-length args) 1)
        (c-port? (c-car args))
        (error '|(port?) wrong number of arguments --| args)))

  (define (positive? . args)
    (if (c-= (c-length args) 1)
        (if (c-real? (c-car args))
            (c-positive? (c-car args))
            (error '|(positive?) wrong type of argument --| args))
        (error '|(positive?) wrong number of arguments --| args)))

  (define (rational? . args)
    (if (c-= (c-length args) 1)
        (begin
          (define obj (c-car args))
          (and (c-real? obj) (c-= (c-exact obj) obj)))
        (error '|(rational?) wrong number of arguments --| args)))

  (define (read-bytevector . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< len 3))
        (begin
          (define k (c-car args))
          (define port (if (c-= len 2)
                           (c-cadr args)
                           (c-current-input-port)))
          (if (and (c-integer? k) (c-exact? k) (c-< -1 k)
                   (c-input-port? port))
              (c-read-bytevector k port)
              (error '|(read-bytevector) wrong type of argument --| args)))
        (error '|(read-bytevector) wrong number of arguments --| args)))
  

  (define (read-char . args)
    (define len (c-length args))
    (if (c-< len 2)
        (begin
          (define port (if (c-= len 1)
                           (c-car args)
                           (c-current-input-port)))
          (if (and (c-input-port? port) (c-input-port-open? port) (c-textual-port? port))
              (c-read-char port)
              (error '|(read-char) wrong type of argument --| args)))
        (error '|(read-char) wrong number of arguments --| args)))

  (define (read-u8 . args)
    (define len (c-list? args))
    (if (c-< len 2)
        (begin
          (define port (if (c-= len 0)
                           (c-current-input-port)
                           (c-car args)))
          (if (and (c-input-port? port)
                   (c-binary-port? port)
                   (c-input-port-open? port))
              (c-read-u8 port)
              (error '|(read-u8) wrong type of argument --| args)))
        (error '|(read-u8) wrong number of arguments --| args)))
              
  (define (real? . args)
    (if (c-= (c-length args) 1)
        (c-real? (c-car args))
        (error '|(real?) wrong number of arguments --| args)))

  (define (reverse . args)
    (if (c-= (c-length args) 1)
        (if (c-list? (c-car args))
            (c-reverse (c-car args))
            (error '|(reverse) wrong type of argument --| args))
        (error '|(reverse) wrong number of arguments --| args)))

  (define (round . args)
    (if (c-= (c-length args) 1)
        (if (c-real? (c-car args))
            (c-round (c-car args))
            (error '|(round) wrong type of argument --| args))
        (error '|(round) wrong number of arguments --| args)))
        

  (define (set-car! . args)
    (if (c-= (c-length args) 2)
        (begin
          (define pair (c-car args))
          (if (c-pair? pair)
              (c-set-car! pair (c-cadr args))
              (error '|(set-car!) wrong type of argument --| args)))
        (error '|(set-car!) wrong number of arguments --| args)))

  (define (set-cdr! . args)
    (if (c-= (c-length args) 2)
        (begin
          (define pair (c-car args))
          (if (c-pair? pair)
              (c-set-cdr! pair (c-cadr args))
              (error '|(set-cdr!) wrong type of argument --| args)))
        (error '|(set-cdr!) wrong number of arguments --| args)))


  (define (square . args)
    (if (c-= (c-length args) 1)
        (if (c-number? (c-car args))
            (c-square (c-car args))
            (error '|(square) wrong type of argument --| args))
        (error '|(square) wrong number of arguments --| args)))

  (define (string->list . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< len 4))
        (begin
          (define string (c-car args))
          (define start (if (c-< 1 len) (c-cadr args) 0))
          (if (c-string? string)
              (begin
                (define str-len (c-string-length string))
                (define end (if (c-= len 3) (c-caddr args) str-len))
                (if (and (c-integer? start) (c-exact? start)
                         (c-integer? end) (c-exact? end))
                    (if (and (c-< -1 start) (c-< start end)
                             (c-< end (c-+ str-len 1)))
                        (c-string->list string start end)
                        (error '|(string->list) out of range --| args))
                    (error '|(string->list) wrong type of argument --| args)))
              (error '|(string->list) wrong type of argument --| args)))
        (error '|(string->list) wrong number of arguments --| args)))

  (define (string->number . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< len 3))
        (begin
          (define string (c-car args))
          (define radix (if (c-= len 1)
                            10
                            (c-cadr args)))
          (if (and (c-string? string)
                   (or (c-= radix 2)
                       (c-= radix 8)
                       (c-= radix 10)
                       (c-= radix 16)))
              (c-string->number string radix)
              (error '|(string->number) wrong type of argument --| args)))
        (error '|(string->number) wrong number of arguments --| args)))

  (define (string->symbol . args)
    (if (c-= (c-length args) 1)
        (if (c-string? (c-car args))
            (c-string->symbol (c-car args))
            (error '|(string->symbol) wrong type of argument --| args))
        (error '|(string->symbol) wrong number of arguments --| args)))

  (define (string->utf8 . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< len 4))
        (begin
          (define string (c-car args))
          (define start (if (c-< 1 len)
                            (c-cadr args)
                            0))
          (if (c-string? string)
              (begin
                (define str-len (c-string-length string))
                (define end (if (c-< 2 len)
                                (c-caddr args)
                                str-len))
                (if (and (c-integer? start) (c-exact? start)
                         (c-integer? end) (c-exact? end))
                    (if (and (c-< -1 start) (c-< start end)
                             (c-< end (c-+ str-len 1)))
                        (c-string->utf8 string start end)
                        (error '|(string->utf8) out of range --| args))
                    (error '|(string->utf8) wrong type of argument --| args)))
              (error '|(string->utf8) wrong type of argument --| args)))
        (error '|(string->utf8) wrong number of arguments --| args)))
  
  (define (string-length . args)
    (if (c-= (c-length args) 1)
        (if (c-string? (c-car args))
            (c-string-length (c-car args))
            (error '|(string-length) wrong type of argument --| args))
        (error '|(string-length) wrong number of arguments --| args)))

  (define (string-ref . args)
    (if (c-= (c-length args) 2)
        (begin
          (define string (c-car args))
          (define k (c-cadr args))
          (if (and (c-string? string)
                   (c-integer? k) (c-exact? k) (c-< -1 k))
              (if (c-< k (c-string-length string))
                  (c-string-ref string k)
                  (error '|(string-ref) out of range --| args))
              (error '|(string-ref) wrong type of argument --| args)))
        (error '|(string-ref) wrong number of arguments --| args)))

  (define (string-set! . args)
    (if (c-= (c-length args) 3)
        (begin
          (define string (c-car args))
          (define k (c-cadr args))
          (define char (c-caddr args))
          (if (and (c-string? string)
                   (c-integer? k) (c-exact? k) (c-< 0 k))
              (if (c-< k (c-string-length string))
                  (c-string-set! string k char)
                  (error '|(string-set!) out of range --| args))
              (error '|(string-set!) wrong type of argument --| args)))
        (error '|(string-set!) wrong number of arguments --| args)))

  (define (string<=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter string string-of-list)
            (if (c-null? string-of-list)
                #t
                (if (c-string? (c-car string-of-list))
                    (if (c-string<=? string (c-car string-of-list))
                        (iter (c-car string-of-list) (c-cdr string-of-list))
                        #f)
                    (error '|(string<=?) wrong type of argument --| args))))
          (if (c-string? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(string<=?) wrong type of argument --| args)))
        (error '|(string<=?) wrong number of arguments --| args)))

  (define (string<? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter string string-of-list)
            (if (c-null? string-of-list)
                #t
                (if (c-string? (c-car string-of-list))
                    (if (c-string<? string (c-car string-of-list))
                        (iter (c-car string-of-list) (c-cdr string-of-list))
                        #f)
                    (error '|(string<?) wrong type of argument --| args))))
          (if (c-string? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(string<?) wrong type of argument --| args)))
        (error '|(string<?) wrong number of arguments --| args)))

  (define (string=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter string string-of-list)
            (if (c-null? string-of-list)
                #t
                (if (c-string? (c-car string-of-list))
                    (if (c-string=? string (c-car string-of-list))
                        (iter (c-car string-of-list) (c-cdr string-of-list))
                        #f)
                    (error '|(string=?) wrong type of argument --| args))))
          (if (c-string? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(string=?) wrong type of argument --| args)))
        (error '|(string=?) wrong number of arguments --| args)))

  (define (string>=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter string string-of-list)
            (if (c-null? string-of-list)
                #t
                (if (c-string? (c-car string-of-list))
                    (if (c-string>=? string (c-car string-of-list))
                        (iter (c-car string-of-list) (c-cdr string-of-list))
                        #f)
                    (error '|(string>=?) wrong type of argument --| args))))
          (if (c-string? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(string>=?) wrong type of argument --| args)))
        (error '|(string>=?) wrong number of arguments --| args)))

  (define (string>? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter string string-of-list)
            (if (c-null? string-of-list)
                #t
                (if (c-string? (c-car string-of-list))
                    (if (c-string>? string (c-car string-of-list))
                        (iter (c-car string-of-list) (c-cdr string-of-list))
                        #f)
                    (error '|(string>?) wrong type of argument --| args))))
          (if (c-string? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(string>?) wrong type of argument --| args)))
        (error '|(string>?) wrong number of arguments --| args)))
  
  (define (string? . args)
    (if (c-= (c-length args) 1)
        (c-string? (c-car args))
        (error '|(string-length) wrong number of arguments --| args)))

  (define (symbol->string . args)
    (if (c-= (c-length args) 1)
        (if (c-symbol? (c-car args))
            (c-symbol->string (c-car args))
            (error '|(symbol->string) wrong type of argument --| args))
        (error '|(symbol->string) wrong number of arguments --| args)))

  (define (symbol=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter symbol symbol-of-list)
            (if (c-null? symbol-of-list)
                #t
                (if (c-symbol? (c-car symbol-of-list))
                    (if (c-symbol=? symbol (c-car symbol-of-list))
                        (iter (c-car symbol-of-list) (c-cdr symbol-of-list))
                        #f)
                    (error '|(symbol=?) wrong type of argument --| args))))
          (if (c-symbol? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(symbol=?) wrong type of argument --| args)))
        (error '|(symbol=?) wrong number of arguments --| args)))
    
  (define (textual-port? . args)
    (if (c-= (c-length args) 1)
        (c-textual-port? (c-car args))
        (error '|(textual-port?) wrong number of arguments --| args)))

  (define (truncate . args)
    (if (c-= (c-length args) 1)
        (if (c-real? (c-car args))
            (c-truncate (c-car args))
            (error '|(truncate) wrong type of argument --| args))
        (error '|(truncate) wrong number of arguments --| args)))

  (define (utf8->string . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< len 4))
        (begin
          (define bytevector (c-car args))
          (define start (if (c-< 1 len)
                            (c-cadr args)
                            0))
          (if (c-bytevector? bytevector)
              (begin
                (define bv-len (c-bytevector-length bytevector))
                (define end (if (c-= len 3)
                                (c-caddr args)
                                bv-len))
                (if (and (c-integer? start) (c-exact? start) (c-< -1 start)
                         (c-integer? end) (c-exact? end) (c-< end (c-+ bv-len 1))
                         (c-< start end))
                    (c-utf8->string bytevector start end)
                    (error '|(utf8->string) wrong type of argument --| args)))
              (error '|(utf8->string) wrong type of argument --| args)))
        (error '|(utf8->string) wrong number of arguments --| args)))
            
  (define (vector? . args)
    (if (c-= (c-length args) 1)
        (c-vector? (c-car args))
        (error '|(vector?) wrong number of arguments --| args)))

  (define (write-bytevector . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< len 5))
        (begin
          (define bytevector (c-car args))
          (define port (if (c-< 1 len)
                           (c-cadr args)
                           (current-output-port)))
          (define start (if (c-< 2 len)
                            (c-caddr args)
                            0))
          (if (and (c-bytevector? bytevector)
                   (c-binary-port? port)
                   (c-output-port-open? port))
              (begin
                (define bv-len (c-bytevector-length bytevector))
                (define end (if (c-= len 4)
                                (c-cadddr args)
                                bv-len))
                (if (and (c-integer? start) (c-exact? start) (c-< -1 start)
                         (c-integer? end) (c-exact? end) (c-< end (c-+ bv-len 1))
                         (c-< start end))
                    (c-write-bytevector bytevector port start end)
                    (error '|(write-bytevector) wrong type of argument --| args)))
              (error '|(write-bytevector) wrong type of argument --| args)))
        (error '|(write-bytevector) wrong number of arguments --| args)))

  (define (write-char . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< 3))
        (begin
          (define char (c-car args))
          (define port (if (c-= len 2)
                           (c-cadr args)
                           (current-output-port)))
          (if (and (c-char? char)
                   (c-textual-port? port)
                   (c-output-port-open? port))
              (c-write-char char port)
              (error '|(write-char) wrong type of argument --| args)))
        (error '|(write-char) wrong number of arguments --| args)))

  (define (write-string . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< len 5))
        (begin
          (define string (c-car args))
          (define port (if (c-< 1 len)
                           (c-cadr args)
                           (current-output-port)))
          (define start (if (c-< 2 len)
                            (c-caddr args)
                            0))
          (if (and (c-string? string)
                   (c-textual-port? port)
                   (c-output-port-open? port))
              (begin
                (define str-len (c-string-length string))
                (define end (if (c-= len 4)
                                (c-cadddr args)
                                str-len))
                (if (and (c-integer? start) (c-exact? start) (c-< -1 start)
                         (c-integer? end) (c-exact? end) (c-< end (c-+ str-len 1))
                         (c-< start end))
                    (c-write-string string port start end)
                    (error '|(write-string) wrong type of argument --| args)))
              (error '|(write-string) wrong type of argument --| arg)))
        (error '|(write-string) wrong number of arguments --| args)))

  (define (write-u8 . args)
    (define len (c-length args))
    (if (and (c-< 0 len) (c-< 3))
        (begin
          (define byte (c-car args))
          (define port (if (c-= len 2)
                           (c-cadr args)
                           (current-output-port)))
          (if (and (c-integer? byte) (c-exact? byte)
                   (c-< -1 byte) (c-< byte 256)
                   (c-binary-port? port)
                   (c-output-port-open? port))
              (c-write-u8 byte port)
              (error '|(write-u8) wrong type of argument --| args)))
        (error '|(write-u8) wrong number of arguments --| args)))

  )
