(begin
  ;; char-alphabetic? primitive
  (define (char-ci<=? char1 char2 . chars)
    (define (cmp char1 char2)
      (char<=? (char-foldcase char1)
               (char-foldcase char2)))
    (define (iter char chars)
      (cond ((null? chars) #t)
            ((cmp char (car chars)) (iter (car chars) (cdr chars)))
            (#t #f)))
    (iter char1 (cons char2 chars)))
  (define (char-ci<? char1 char2 . chars)
    (define (cmp char1 char2)
      (char<? (char-foldcase char1)
               (char-foldcase char2)))
    (define (iter char chars)
      (cond ((null? chars) #t)
            ((cmp char (car chars)) (iter (car chars) (cdr chars)))
            (#t #f)))
    (iter char1 (cons char2 chars)))
  (define (char-ci=? char1 char2 . chars)
    (define (cmp char1 char2)
      (char=? (char-foldcase char1)
              (char-foldcase char2)))
    (define (iter char chars)
      (cond ((null? chars) #t)
            ((cmp char (car chars)) (iter (car chars) (cdr chars)))
            (#t #f)))
    (iter char1 (cons char2 chars)))
  (define (char-ci>=? char1 char2 . chars)
    (define (cmp char1 char2)
      (char>=? (char-foldcase char1)
               (char-foldcase char2)))
    (define (iter char chars)
      (cond ((null? chars) #t)
            ((cmp char (car chars)) (iter (car chars) (cdr chars)))
            (#t #f)))
    (iter char1 (cons char2 chars)))
  (define (char-ci>? char1 char2 . chars)
    (define (cmp char1 char2)
      (char>? (char-foldcase char1)
               (char-foldcase char2)))
    (define (iter char chars)
      (cond ((null? chars) #t)
            ((cmp char (car chars)) (iter (car chars) (cdr chars)))
            (#t #f)))
    (iter char1 (cons char2 chars)))
  ;; char-downcase primitive
  ;; char-foldcase primitive
  ;; char-lower-case? primitive
  ;; char-numeric? primitive
  ;; char-upcase primitive
  ;; char-upper-case? primitive
  ;; char-whitespace? primitive
  ;; digit-value primitive
  (define (string-ci<=? string1 string2 . strings)
    (define (iter string strings)
      (cond ((null? strings) #t)
            ((or (string-ci<? string (car strings))
                 (string-ci=? string (car strings)))
             (iter (car string) (cdr strings)))
            (#t #f)))
    (iter string1 (cons string2 strings)))
  (define (string-ci<? string1 string2 . srrings)
    (define (cmp string1 string2)
      (define (iter list1 list2)
        (cond ((null? list1) #t)
              ((null? list2) #f)
              ((char-ci<? (car list1) (car list2))
               (iter (cdr list1) (cdr list2)))
              (#t #f)))
      (iter string1 string2))
    (define (iter string strings)
      (cond ((null? strings) #t)
            ((cmp string (car strings))
             (iter (car strings) (cdr strings)))
            (#t #f)))
    (iter string1 (cons string2 strings)))
  (define (string-ci=? string1 string2 . srrings)
    (define (cmp string1 string2)
      (define (iter list1 list2)
        (cond ((null? list1) #t)
              ((null? list2) #f)
              ((char-ci=? (car list1) (car list2))
               (iter (cdr list1) (cdr list2)))
              (#t #f)))
      (iter string1 string2))
    (define (iter string strings)
      (cond ((null? strings) #t)
            ((cmp string (car strings))
             (iter (car strings) (cdr strings)))
            (#t #f)))
    (iter string1 (cons string2 strings)))          
  (define (string-ci>=? string1 string2 . strings)
    (define (iter string strings)
      (cond ((null? strings) #t)
            ((or (string-ci>? string (car strings))
                 (string-ci=? string (car strings)))
             (iter (car string) (cdr strings)))
            (#t #f)))
    (iter string1 (cons string2 strings)))
  (define (string-ci>=? string1 string2 . strings)
    (define (iter string strings)
      (cond ((null? strings) #t)
            ((string-ci<=? (car strings) string))
             (iter (car string) (cdr strings)))
            (#t #f))
    (iter string1 (cons string2 strings)))
  (define (string-ci>=? string1 string2 . strings)
    (define (iter string strings)
      (cond ((null? strings) #t)
            ((string-ci<? (car strings) string))
             (iter (car string) (cdr strings)))
            (#t #f))
    (iter string1 (cons string2 strings)))
  (define (string-downcase string) (string-map char-downcase string))
  (define (string-foldcase string) (string-map char-foldcase string))
  (define (string-upcase string) (string-map char-upcase))
  'char-library
  )
