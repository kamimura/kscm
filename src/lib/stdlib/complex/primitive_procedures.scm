(begin
  (define (angle . args)
    (if (c-= (c-length args) 1)
        (if (c-number? (c-car args))
            (c-angle (c-car args))
            (error '|(angle) wrong type of argument --| args))
        (error '|(angle) wrong number of arguments --| args)))
  (define (imag-part . args)
    (if (c-= (c-length args) 1)
        (if (c-number? (c-car args))
            (c-imag-part (c-car args))
            (error '|(imag-part) wrong type of argument --| args))
        (error '|(imag-part) wrong number of arguments --| args)))
  (define (magnitude . args)
    (if (c-= (c-length args) 1)
        (if (c-number? (c-car args))
            (c-magnitude (c-car args))
            (error '|(magnitude) wrong type of argument --| args))
        (error '|(magnitude) wrong number of arguments --| args)))

  (define (make-polar . args)
    (if (c-= (c-length args) 2)
        (begin
          (define x1 (c-car args))
          (define x2 (c-cadr args))
          (if (and (c-real? x1) (c-real? x2))
              (c-make-polar (c-inexact x1) (c-inexact x2))
              (error '|(make-polar) wrong type of argument --| args)))
        (error '|(make-polar) wrong number of arguments --| args)))

  (define (make-rectangular . args)
    (if (c-= (c-length args) 2)
        (begin
          (define x1 (c-car args))
          (define x2 (c-cadr args))
          (if (and (c-real? x1) (c-real? x2))
              (c-make-rectangular (c-inexact x1) (c-inexact x2))
              (error '|(make-rectangular) wrong type of argument --| args)))
        (error '|(make-rectangular) wrong number of arguments --| args)))
  
  (define (real-part . args)
    (if (c-= (c-length args) 1)
        (if (c-number? (c-car args))
            (c-real-part (c-car args))
            (error '|(real-part) wrong type of argument --| args))
        (error '|(real-part) wrong number of arguments --| args)))
  )
