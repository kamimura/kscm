(begin
  (define (char-alphabetic? . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char-alphabetic? (c-car args))
            (error '|(char-alphabetic?) wrong type of argument --| args))
        (error '|(char-alphabetic?) wrong number of arguments --| args)))

  (define (char-ci<=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char-ci<=? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char-ci<=?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char-ci<=?) wrong type of argument --| args)))
        (error '|(char-ci<=?) wrong number of arguments --| args)))
  (define (char-ci<? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char-ci<? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char-ci<?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char-ci<?) wrong type of argument --| args)))
        (error '|(char-ci<?) wrong number of arguments --| args)))
  (define (char-ci=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char-ci=? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char-ci=?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char-ci=?) wrong type of argument --| args)))
        (error '|(char-ci=?) wrong number of arguments --| args)))
  (define (char-ci>=? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char-ci>=? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char-ci>=?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char-ci>=?) wrong type of argument --| args)))
        (error '|(char-ci>=?) wrong number of arguments --| args)))
  (define (char-ci>? . args)
    (if (c-< 1 (c-length args))
        (begin
          (define (iter char chars)
            (if (c-null? chars)
                #t
                (if (c-char? (c-car chars))
                    (if (c-char-ci>? char (c-car chars))
                        (iter (c-car chars) (c-cdr chars))
                        #f)
                    (error '|(char-ci>?) wrong type of argument --| args))))
          (if (c-char? (c-car args))
              (iter (c-car args) (c-cdr args))
              (error '|(char-ci>?) wrong type of argument --| args)))
        (error '|(char-ci>?) wrong number of arguments --| args)))

  (define (char-downcase . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char-downcase (c-car args))
            (error '|(char-downcase) wrong type of argument --| args))
        (error '|(char-downcase) wrong number of arguments --| args)))
  
  (define (char-foldcase . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char-foldcase (c-car args))
            (error '|(char-foldcase) wrong type of argument --| args))
        (error '|(char-foldcase) wrong number of arguments --| args)))

  (define (char-lower-case? . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char-lower-case? (c-car args))
            (error '|(char-lower-case?) wrong type of argument --| args))
        (error '|(char-lower-case?) wrong number of arguments --| args)))

  (define (char-numeric? . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char-numeric? (c-car args))
            (error '|(char-numeric?) wrong type of argument --| args))
        (error '|(char-numeric?) wrong number of arguments --| args)))

  (define (char-upcase . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char-upcase (c-car args))
            (error '|(char-upcase) wrong type of argument --| args))
        (error '|(char-upcase) wrong number of arguments --| args)))

  (define (char-upper-case? . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char-upper-case? (c-car args))
            (error '|(char-upper-case?) wrong type of argument --| args))
        (error '|(char-upper-case?) wrong number of arguments --| args)))

  (define (char-whitespace? . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-char-whitespace? (c-car args))
            (error '|(char-whitespace?) wrong type of argument --| args))
        (error '|(char-whitespace?) wrong number of arguments --| args)))
  
  (define (digit-value . args)
    (if (c-= (c-length args) 1)
        (if (c-char? (c-car args))
            (c-digit-value (c-car args))
            (error '|(digit-value) wrong type of argument --| args))
        (error '|(digit-value) wrong number of arguments --| args)))

  )

