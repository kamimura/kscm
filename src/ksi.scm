((lambda ()
   (define (error message . objs)
     (list 'error-object message objs))
   (define (error-object? exp)
     (tagged-list? exp 'error-object))
   (define (error-object-message exp) (car (cdr exp)))
   (define (error-objects exp) (car (cdr (cdr exp))))
   
   (define (eval exp env)
     (if (error-object? exp)
         exp
         (if
          (eof-object? exp)
          (exit)
          (if
           (self-evaluating? exp)
           exp
           (if
            (variable? exp)
            (lookup-variable-value exp env)
            (if
             (quoted? exp)
             (text-of-quotation exp)
             (if
              (lambda? exp)
              (make-procedure (lambda-parameters exp)
                              (lambda-body exp)
                              env)
              (if
               (definition? exp)
               (eval-definition exp env)
               (if
                (assignment? exp)
                (eval-assignment exp env)
                (if
                 (if? exp)
                 (eval-if exp env)
                 (if
                  (begin? exp)
                  (eval-sequence (begin-actions exp) env)
                  (if
                   (load? exp)
                   (eval (read (open-input-file (car (cdr exp)))) env)
                   (if
                    (pair? exp)
                    (begin
                      (define op (eval (car exp) env))
                      (if (error-object? op)
                          op
                          (begin
                            (define ops (list-of-values (cdr exp) env))
                            (define o (include-error? ops))
                            (if o
                                o
                                (apply op ops)))))
                    (error "(eval) unknown expression type --"
                           exp))))))))))))))

   (define (eval-definition exp env)
     (if (or (and (symbol? (car (cdr  exp)))
                  (= (length exp) 3))
             (and (pair? (car (cdr  exp)))
                  (< 2 (length exp))))
         (begin
           (define o (eval (definition-value exp) env))
           (if (error-object? o)
               o
               (define-variable!
                 (definition-variable exp)
                 o
                 env)
               (error "(eval) unknown expression type --" exp)))))

   (define (eval-assignment exp env)
     (if (= (length exp) 3)
         (begin
           (define o (eval (assignment-value exp) env))
           (if (error-object? o)
               o
               (set-variable-value! (assignment-variable exp)
                                    o
                                    env)))
         (error "(eval) unknown expression type --" exp)))

   (define (eval-if exp env)
     (if (or (= (length exp) 3)
             (= (length exp) 4))
         (begin
           (define pred (eval (if-predicate exp) env))
           (if (error-object? pred)
               pred
               (if pred
                   (eval (if-consequent exp) env)
                   (eval (if-alternative exp) env))))
         (error "(eval) unknown expression type --" exp)))

   (define (eval-sequence exps env)
     (if (null? (cdr  exps))
         (eval (car exps) env)
         (begin
           (define o (eval (car exps) env))
           (if (error-object? o)
               o
               (eval-sequence (cdr exps) env)))))

   (define (include-error? list)
     (if (null? list)
         #f
         (if (error-object? (car list))
             (car list)
             (include-error? (cdr list)))))
   (define (list-of-values exps env)
     (if (null? exps)
         '()
         (cons (eval (car exps) env)
               (list-of-values (cdr exps) env))))
   
   (define (apply procedure arguments)
     (if (primitive-procedure? procedure)
         (c-apply (primitive-implementation procedure) arguments)
         (if (compound-procedure? procedure)
             (begin
               (define env  (extend-environment
                             (procedure-parameters procedure)
                             arguments
                             (procedure-environment procedure)))
               (if (error-object? env)
                   env
                   (eval-sequence (procedure-body procedure) env)))
             (error "unknown procedure type --" procedure))))
   
   (define (self-evaluating? exp)
     (or (boolean? exp)
         (number? exp)
         (vector? exp)
         (c-char? exp)
         (string? exp)
         (bytevector? exp)
         (procedure? exp)
         (eq? exp (if #f #f))))
   (define (variable? exp) (symbol? exp))
   (define (quoted? exp) (tagged-list? exp 'quote))
   (define (text-of-quotation exp) (car (cdr exp)))
   (define (tagged-list? exp tag)
     (if (pair? exp)
         (eq? (car exp) tag)
         #f))
   
   (define (lambda? exp) (tagged-list? exp 'lambda))
   (define (lambda-parameters exp) (car (cdr exp)))
   (define (lambda-body exp) (cdr (cdr exp)))
   (define (make-lambda parameters body) (cons 'lambda (cons parameters body)))

   (define (if? exp) (tagged-list? exp 'if))
   (define (if-predicate exp) (car (cdr exp)))
   (define (if-consequent exp) (car (cdr (cdr exp))))
   (define (if-alternative exp)
     (if (not (null? (cdr (cdr (cdr exp)))))
         (car (cdr (cdr (cdr exp))))))

   (define (begin? exp) (tagged-list? exp 'begin))
   (define (begin-actions exp) (cdr exp))

   (define (load? exp) (tagged-list? exp 'load))
   
   (define (definition? exp) (tagged-list? exp 'define))
   (define (definition-variable exp)
     (if (symbol? (car (cdr exp)))
         (car (cdr exp))
         (car (car (cdr exp)))))
   (define (definition-value exp)
     (if (symbol? (car (cdr exp)))
         (car (cdr (cdr exp)))
         (make-lambda (cdr (car (cdr exp)))
                      (cdr (cdr exp)))))
   (define (assignment? exp) (tagged-list? exp 'set!))
   (define (assignment-variable exp) (car (cdr exp)))
   (define (assignment-value exp) (car (cdr (cdr exp))))
   (define (first-frame env) (car env))
   (define the-empty-environment '())
   (define (make-frame variables values) (cons variables values))
   (define (frame-variables frame) (car frame))
   (define (frame-values frame) (cdr frame))
   (define (add-binding-to-frame! var val frame)
     (set-car! frame (cons var (car frame)))
     (set-cdr! frame (cons val (cdr frame))))   
   (define (define-variable! var val env)
     ((lambda (frame)
        (define (scan vars vals)
          (if (null? vars)
              (add-binding-to-frame! var val frame)
              (if (eq? var (car vars))
                  (set-car! vals val)
                  (scan (cdr vars) (cdr vals)))))
        (scan (frame-variables frame)
              (frame-values frame)))
      (first-frame env)))
   (define (set-variable-value! var val env)
     (define (env-loop env)
       (define (scan vars vals)
         (if (null? vars)
             (env-loop (enclosing-environment env))
             (if (eq? var (car vars))
                 (set-car! vals val)
                 (scan (cdr vars) (cdr vals)))))
       (if (eq? env the-empty-environment)
           (error "(set!) unbound variable --" var)
           ((lambda (frame)
              (scan (frame-variables frame)
                    (frame-values frame)))
            (first-frame env))))
     (env-loop env))
   
   (define (make-procedure parameters body env)
     (list 'procedure parameters body env))
   (define (compound-procedure? p) (tagged-list? p 'procedure))
   (define (procedure-parameters p) (car (cdr p)))
   (define (procedure-body p) (car (cdr (cdr p))))
   (define (procedure-environment p) (car (cdr (cdr (cdr p)))))
   
   (define (enclosing-environment env) (cdr env))
   (define (extend-environment vars vals base-env)
     (define (iter vars-0 vals-0 vars-1 vals-1)
       (if (symbol? vars-0)
           (cons (make-frame (cons vars-0 vars-1)
                             (cons vals-0 vals-1))
                 base-env)
           (if (null? vars-0)
               (if (null? vals-0)
                   (cons (make-frame vars-1 vals-1) base-env)
                   (error "too many arguments supplied" vars vals))
               (if (null? vals-0)
                   (error "too few arguments supplied" vars vals)
                   (iter (cdr vars-0)
                         (cdr vals-0)
                         (cons (car vars-0) vars-1)
                         (cons (car vals-0) vals-1))))))
     (iter vars vals '() '()))
   (define (lookup-variable-value var env)
     (define (env-loop env)
       (define (scan vars vals)
         (if (null? vars)
             (env-loop (enclosing-environment env))
             (if (eq? var (car vars))
                 (car vals)
                 (scan (cdr vars) (cdr vals)))))
       (if (eq? env the-empty-environment)
           (error "unbound variable --" var)
           ((lambda (frame)
              (scan (frame-variables frame)
                    (frame-values frame)))
            (first-frame env))))
     (env-loop env))

   (define (numbers? objs)
     (if (null? objs)
         #t
         (if (number? (car objs))
             (numbers? (cdr objs))
             #f)))

   (define (primitive-procedure? proc) (tagged-list? proc 'primitive))
   (define (primitive-implementation proc) (car (cdr proc)))
   (load "primitive_procedures.scm")
   (define primitive-procedures
     (list (list '* *)
           (list '+ +)
           (list '- -)
           (list '/ /)
           (list '< <)
           (list '<= <=)
           (list '= =)
           (list '> >)
           (list '>= >=)
           (list 'abs abs)
           (list 'append append)
           (list 'binary-port? binary-port?)
           (list 'boolean=? boolean=?)
           (list 'boolean? boolean?)          
           (list 'bytevector bytevector)
           (list 'bytevector-append bytevector-append)
           (list 'bytevector-copy bytevector-copy)
           (list 'bytevector-length bytevector-length)
           (list 'bytevector-u8-ref bytevector-u8-ref)
           (list 'bytevector-u8-set! bytevector-u8-set!)
           (list 'bytevector? bytevector?)
           (list 'car car)
           (list 'cdr cdr)
           (list 'ceiling ceiling)
           (list 'char->integer char->integer)
           
           (list 'cons cons)

           (list 'length length)
           (list 'list list)
           (list 'list? list?)
           ))
   (define (map proc list)
     (if (null? list)
         '()
         (cons (proc (car list))
               (map proc (cdr list)))))
   (define (primitive-procedure-names) (map car primitive-procedures))
   (define (primitive-procedure-objects)
     (map (lambda (proc)
            (list 'primitive (car (cdr proc))))
          primitive-procedures))

   (define (setup-environment)
     ((lambda (initial-env)        
        (define-variable! 'quote quote initial-env)
        (define-variable! 'lambda lambda initial-env)
        (define-variable! 'define define initial-env)
        (define-variable! 'set! set! initial-env)
        (define-variable! 'if if initial-env)
        (define-variable! 'begin begin initial-env)
        initial-env)
      (extend-environment
       (primitive-procedure-names)
       (primitive-procedure-objects)
       the-empty-environment)))
   
   (define the-global-environment (setup-environment))

   (define input-prompt "> ")
   (define output-prompt "=> ")
   (define input-port (current-input-port))
   (define output-port (current-output-port))   
   (define (driver-loop)
     (prompt-for-input input-prompt)
     ((lambda (input)
        ((lambda (output)
           (announce-output output-prompt)
           (user-print output))
         (eval input the-global-environment)))
      (read input-port))
     (driver-loop))
   (define (prompt-for-input string)
     (display string output-port))
   (define (announce-output string)
     (display string output-port))
   (define (user-print object)
     (if (error-object? object)
         (begin
           (display "Error: ")
           (display (error-object-message object))
           (define (iter objs)
             (if (not (null? objs))
                 (begin (display " ")
                        (write (car objs))
                        (iter (cdr objs)))))
           (iter (error-objects object)))
         (if (primitive-procedure? object)
             (display '|#<primitive-procedure>| output-port)
             ;; (write (car (cdr object)) output-port)
             (if (compound-procedure? object)
                 (begin (display '|#<compound-procedure | output-port)
                        (write (procedure-parameters object) output-port)
                        (write '> output-port))
                 (write object output-port))))
     (newline output-port))


   (eval '(load "compound_procedures.scm") the-global-environment)
   (driver-loop)
   ))
