(begin
   (define (error message . objs)
     (list 'error-object message objs))
   (define (error-object? exp)
     (tagged-list? exp 'error-object))
   (define (error-object-message exp) (car (cdr exp)))
   (define (error-irritants exp) (car (cdr (cdr exp))))
   
   (define (eval exp env)
     (if (error-object? exp)
         exp
         (if
          (eof-object? exp)
          (exit)
          (if
           (self-evaluating? exp)
           exp
           (if
            (variable? exp)
            (lookup-variable-value exp env)
            (if
             (quoted? exp)
             (text-of-quotation exp)
             (if
              (lambda? exp)
              (make-procedure (lambda-parameters exp)
                              (lambda-body exp)
                              env)
              (if
               (definition? exp)
               (eval-definition exp env)
               (if
                (assignment? exp)
                (eval-assignment exp env)
                (if
                 (if? exp)
                 (eval-if exp env)
                 (if
                  (begin? exp)
                  (eval-sequence (begin-actions exp) env)
                  (if (and? exp)
                      (eval (and->if exp) env)
                      (if (or? exp)
                          (eval (or->if exp) env)
                          (if
                           (load? exp)
                           (eval (read (open-input-file (car (cdr exp)))) env)
                           (if
                            (pair? exp)
                            (begin
                              (define op (eval (car exp) env))
                              (if (error-object? op)
                                  op
                                  (begin
                                    (define ops (list-of-values (cdr exp) env))
                                    (define o (include-error? ops))
                                    (if o
                                        o
                                        (apply op ops)))))
                            (error "(eval) unknown expression type --"
                                   exp))))))))))))))))

   (define (eval-definition exp env)
     (if (or (and (c-symbol? (car (cdr  exp)))
                  (= (length exp) 3))
             (and (pair? (car (cdr  exp)))
                  (< 2 (length exp))))
         (begin
           (define o (eval (definition-value exp) env))
           (if (error-object? o)
               o
               (define-variable!
                 (definition-variable exp)
                 o
                 env)
               (error "(eval) unknown expression type --" exp)))))

   (define (eval-assignment exp env)
     (if (= (length exp) 3)
         (begin
           (define o (eval (assignment-value exp) env))
           (if (error-object? o)
               o
               (set-variable-value! (assignment-variable exp)
                                    o
                                    env)))
         (error "(eval) unknown expression type --" exp)))

   (define (eval-if exp env)
     (if (or (= (length exp) 3)
             (= (length exp) 4))
         (begin
           (define pred (eval (if-predicate exp) env))
           (if (error-object? pred)
               pred
               (if pred
                   (eval (if-consequent exp) env)
                   (eval (if-alternative exp) env))))
         (error "(eval) unknown expression type --" exp)))

   (define (eval-sequence exps env)
     (if (null? (cdr  exps))
         (eval (car exps) env)
         (begin
           (define o (eval (car exps) env))
           (if (error-object? o)
               o
               (eval-sequence (cdr exps) env)))))

   (define (include-error? list)
     (if (null? list)
         #f
         (if (error-object? (car list))
             (car list)
             (include-error? (cdr list)))))
   (define (list-of-values exps env)
     (if (null? exps)
         '()
         (cons (eval (car exps) env)
               (list-of-values (cdr exps) env))))
   
   (define (apply procedure arguments)
     (if (primitive-procedure? procedure)
         (c-apply (primitive-implementation procedure) arguments)
         (if (compound-procedure? procedure)
             (begin
               (define env  (extend-environment
                             (procedure-parameters procedure)
                             arguments
                             (procedure-environment procedure)))
               (if (error-object? env)
                   env
                   (eval-sequence (procedure-body procedure) env)))
             (error "unknown procedure type --" procedure))))
   
   (define (self-evaluating? exp)
     (or (boolean? exp)
         (number? exp)
         (vector? exp)
         (c-char? exp)
         (string? exp)
         (bytevector? exp)
         (procedure? exp)
         (eq? exp (if #f #f))))
   (define (variable? exp) (c-symbol? exp))
   (define (quoted? exp) (tagged-list? exp 'quote))
   (define (text-of-quotation exp) (car (cdr exp)))
   (define (tagged-list? exp tag)
     (if (pair? exp)
         (eq? (car exp) tag)
         #f))
   
   (define (lambda? exp) (tagged-list? exp 'lambda))
   (define (lambda-parameters exp) (car (cdr exp)))
   (define (lambda-body exp) (cdr (cdr exp)))
   (define (make-lambda parameters body) (cons 'lambda (cons parameters body)))

   (define (if? exp) (tagged-list? exp 'if))
   (define (if-predicate exp) (car (cdr exp)))
   (define (if-consequent exp) (car (cdr (cdr exp))))
   (define (if-alternative exp)
     (if (not (null? (cdr (cdr (cdr exp)))))
         (car (cdr (cdr (cdr exp))))))

   (define (begin? exp) (tagged-list? exp 'begin))
   (define (begin-actions exp) (cdr exp))

   (define (and? exp) (tagged-list? exp 'and))
   (define (and->if exp)
     (if (null? exp)
         #t
         (begin          
           (define (iter o)
             (if (null? (cdr o))
                 (car o)
                 (list 'if
                       (car o)
                       (iter (cdr o))
                       '#f)))
           (iter exp))))
   
   (define (or? exp) (tagged-list? exp 'or))
   (define (or->if exp)
     (if (null? exp)
         '#f
         (list 'if (car exp) (car exp) (cons 'or (cdr exp)))))
   
   (define (load? exp) (tagged-list? exp 'load))
   
   (define (definition? exp) (tagged-list? exp 'define))
   (define (definition-variable exp)
     (if (c-symbol? (car (cdr exp)))
         (car (cdr exp))
         (car (car (cdr exp)))))
   (define (definition-value exp)
     (if (c-symbol? (car (cdr exp)))
         (car (cdr (cdr exp)))
         (make-lambda (cdr (car (cdr exp)))
                      (cdr (cdr exp)))))
   (define (assignment? exp) (tagged-list? exp 'set!))
   (define (assignment-variable exp) (car (cdr exp)))
   (define (assignment-value exp) (car (cdr (cdr exp))))
   (define (first-frame env) (car env))
   (define the-empty-environment '())
   (define (make-frame variables values) (cons variables values))
   (define (frame-variables frame) (car frame))
   (define (frame-values frame) (cdr frame))
   (define (add-binding-to-frame! var val frame)
     (set-car! frame (cons var (car frame)))
     (set-cdr! frame (cons val (cdr frame))))   
   (define (define-variable! var val env)
     ((lambda (frame)
        (define (scan vars vals)
          (if (null? vars)
              (add-binding-to-frame! var val frame)
              (if (eq? var (car vars))
                  (set-car! vals val)
                  (scan (cdr vars) (cdr vals)))))
        (scan (frame-variables frame)
              (frame-values frame)))
      (first-frame env)))
   (define (set-variable-value! var val env)
     (define (env-loop env)
       (define (scan vars vals)
         (if (null? vars)
             (env-loop (enclosing-environment env))
             (if (eq? var (car vars))
                 (set-car! vals val)
                 (scan (cdr vars) (cdr vals)))))
       (if (eq? env the-empty-environment)
           (error "(set!) unbound variable --" var)
           ((lambda (frame)
              (scan (frame-variables frame)
                    (frame-values frame)))
            (first-frame env))))
     (env-loop env))
   
   (define (make-procedure parameters body env)
     (list 'procedure parameters body env))
   (define (compound-procedure? p) (tagged-list? p 'procedure))
   (define (procedure-parameters p) (car (cdr p)))
   (define (procedure-body p) (car (cdr (cdr p))))
   (define (procedure-environment p) (car (cdr (cdr (cdr p)))))
   
   (define (enclosing-environment env) (cdr env))
   (define (extend-environment vars vals base-env)
     (define (iter vars-0 vals-0 vars-1 vals-1)
       (if (c-symbol? vars-0)
           (cons (make-frame (cons vars-0 vars-1)
                             (cons vals-0 vals-1))
                 base-env)
           (if (null? vars-0)
               (if (null? vals-0)
                   (cons (make-frame vars-1 vals-1) base-env)
                   (error "too many arguments supplied" vars vals))
               (if (null? vals-0)
                   (error "too few arguments supplied" vars vals)
                   (iter (cdr vars-0)
                         (cdr vals-0)
                         (cons (car vars-0) vars-1)
                         (cons (car vals-0) vals-1))))))
     (iter vars vals '() '()))
   (define (lookup-variable-value var env)
     (define (env-loop env)
       (define (scan vars vals)
         (if (null? vars)
             (env-loop (enclosing-environment env))
             (if (eq? var (car vars))
                 (car vals)
                 (scan (cdr vars) (cdr vals)))))
       (if (eq? env the-empty-environment)
           (error "unbound variable --" var)
           ((lambda (frame)
              (scan (frame-variables frame)
                    (frame-values frame)))
            (first-frame env))))
     (env-loop env))

   (define (numbers? objs)
     (if (null? objs)
         #t
         (if (number? (car objs))
             (numbers? (cdr objs))
             #f)))

   (define (primitive-procedure? proc) (tagged-list? proc 'primitive))
   (define (primitive-implementation proc) (car (cdr proc)))
   (load "primitive_procedures.scm")
   (define primitive-procedures
     (list (cons '* *)
           (cons '+ +)
           (cons '- -)
           (cons '/ /)
           (cons '< <)
           (cons '<= <=)
           (cons '= =)
           (cons '> >)
           (cons '>= >=)
           (cons 'abs abs)
           (cons 'append append)
           (cons 'binary-port? binary-port?)
           (cons 'boolean=? boolean=?)
           (cons 'boolean? boolean?)          
           (cons 'bytevector bytevector)
           (cons 'bytevector-append bytevector-append)
           (cons 'bytevector-copy bytevector-copy)
           (cons 'bytevector-length bytevector-length)
           (cons 'bytevector-u8-ref bytevector-u8-ref)
           (cons 'bytevector-u8-set! bytevector-u8-set!)
           (cons 'bytevector? bytevector?)
           (cons 'car car)
           (cons 'cdr cdr)
           (cons 'ceiling ceiling)
           (cons 'char->integer char->integer)
           (cons 'char<=? char<=?)           
           (cons 'char<? char<?)
           (cons 'char=? char=?)
           (cons 'char>=? char>=?)
           (cons 'char>? char>?)
           (cons 'char? char?)           
           (cons 'close-input-port close-input-port)
           (cons 'close-output-port close-output-port)
           (cons 'close-port close-port)
           (cons 'complex? complex?)
           (cons 'cons cons)
           (cons 'current-error-port current-error-port)
           (cons 'current-input-port current-input-port)
           (cons ''current-output-port current-output-port)
           (cons 'denominator denominator)

           (cons 'eof-object eof-object)
           (cons 'eof-object? eof-object?)
           (cons 'eq? eq?)
           (cons 'eqv? eqv?)
           (cons 'error (lambda args
                          (if (c-null? args)
                              (error '|(error) wrong number of arguments --| args)
                              (c-apply error args))))
           (cons 'error-object-irritants
                 (lambda args
                   (if (c-= (c-length args) 1)
                       (if (error-object? (c-car args))
                           (error-object-irritants (c-car args))
                           (error
                            '|(error-object-irritants) wrong type of argument --|
                            args))
                       (error
                        '|(error-object-irritants) wrong number of arguments --|
                        args))))
           (cons 'error-object-message
                 (lambda args
                   (if (c-= (c-length args) 1)
                       (if (error-object? (c-car args))
                           (error-object-message (c-car args))
                           (error
                            '|(error-object-message) wrong type of argument --|
                            args))
                       (error
                        '|(error-object-message) wrong number of arguments --|
                        args))))
           (cons 'error-object?
                 (lambda args
                   (if (c-= (c-length args) 1)
                       (error-object? (c-car args))
                       (error
                        '|(error-object?) wrong number of arguments --| args))))
           (cons 'even? even?)
           (cons 'exact exact)
           (cons 'exact? exact?)
           (cons 'expt expt)
           (cons 'floor floor)
           (cons 'flush-output-port flush-output-port)

           (cons 'gcd gcd)
           (cons 'inexact inexact)
           (cons 'input-port-open? input-port-open?)
           (cons 'input-port? input-port?)
           (cons 'integer->char integer->char)
           (cons 'integer? integer?)
           (cons 'lcm lcm)
           (cons 'length length)
           (cons 'list list)           
           (cons 'list->string list->string)
           (cons 'list? list?)
           (cons 'make-bytevector make-bytevector)
           (cons 'make-list make-list)
           (cons 'make-string make-string)
           (cons 'negative? negative?)
           (cons 'newline newline)
           (cons 'null? null?)
           (cons 'number? number?)
           (cons 'numerator numerator)
           (cons 'odd? odd?)
           (cons 'output-port-open? output-port-open?)
           (cons 'output-port? output-port?)
           (cons 'pair? pair?)
           (cons 'port? port?)
           (cons 'positive? positive?)
           (cons 'procedure?
                 (lambda args
                   (if (c-= (c-length args) 1)
                       (or (primitive-procedure? (c-car args))
                           (compound-procedure? (c-car args)))
                       (error
                        '|(procedure?) wrong number of arguments --| args))))
           (cons 'raise
                 (lambda args
                   (if (c-= (c-length args) 1)
                       (error '|| (c-car args))
                       (error
                        '|(raise) wrong number of arguments --| args))))
           (cons 'rational? rational?)
           (cons 'read-bytevector read-bytevector)
           (cons 'read-char read-char)
           (cons 'read-u8 read-u8)
           (cons 'real? real?)
           (cons 'reverse reverse)
           (cons 'round round)
           (cons 'set-car! set-car!)
           (cons 'set-cdr! set-cdr!)
           (cons 'square square)
           (cons 'string->list string->list)
           (cons 'string->number string->number)
           (cons 'string->symbol string->symbol)
           (cons 'string->utf8 string->utf8)
           (cons 'string-length string-length)
           (cons 'string-ref string-ref)
           (cons 'string-set! string-set!)
           (cons 'string<=? string<=?)
           (cons 'string<? string<?)
           (cons 'string=? string=?)
           (cons 'string>=? string>=?)
           (cons 'string>? string>?)
           (cons 'string? string?)
           (cons 'symbol->string symbol->string)
           (cons 'symbol=? symbol=?)
           (cons 'textual-port? textual-port?)
           (cons 'truncate truncate)
           (cons 'utf8->string utf8->string)

           (cons 'vector? vector?)

           (cons 'write-bytevector write-bytevector)
           (cons 'write-char write-char)
           (cons 'write-string write-string)
           (cons 'write-u8 write-u8)
           ))
   (define (map proc list)
     (if (null? list)
         '()
         (cons (proc (car list))
               (map proc (cdr list)))))
   (define (primitive-procedure-names) (map car primitive-procedures))
   (define (primitive-procedure-objects)
     (map (lambda (proc)
            (list 'primitive (cdr proc)))
          primitive-procedures))

   (define (setup-environment)
     ((lambda (initial-env)        
        (define-variable! 'quote quote initial-env)
        (define-variable! 'lambda lambda initial-env)
        (define-variable! 'define define initial-env)
        (define-variable! 'set! set! initial-env)
        (define-variable! 'if if initial-env)
        (define-variable! 'begin begin initial-env)
        (define-variable! 'and and initial-env)
        (define-variable! 'or or initial-env)
        (define-variable! 'load load initial-env)
        initial-env)
      (extend-environment
       (primitive-procedure-names)
       (primitive-procedure-objects)
       the-empty-environment)))
   
   (define the-global-environment (setup-environment))

   (define input-prompt "> ")
   (define output-prompt "=> ")
   (define input-port (current-input-port))
   (define output-port (current-output-port))   
   (define (driver-loop)
     (prompt-for-input input-prompt)
     ((lambda (input)
        ((lambda (output)
           (announce-output output-prompt)
           (user-print output))
         (eval input the-global-environment)))
      (read input-port))
     (driver-loop))
   (define (prompt-for-input string)
     (display string output-port))
   (define (announce-output string)
     (display string output-port))
   (define (user-print object)
     (if (error-object? object)
         (begin
           (display "Error: ")
           (if (not (eq? (error-object-message object)) '||)
               (display " "))
           (display (error-object-message object))
           (define (iter objs)
             (if (not (null? objs))
                 (begin (display " ")
                        (write (car objs))
                        (iter (cdr objs)))))
           (iter (error-irritants object)))
         (if (primitive-procedure? object)
             (display '|#<primitive-procedure>| output-port)
             (if (compound-procedure? object)
                 (begin (display '|#<compound-procedure | output-port)
                        (write (procedure-parameters object) output-port)
                        (write '> output-port))
                 (write object output-port))))
     (newline output-port))


   (eval '(load "compound_procedures.scm") the-global-environment)
   (driver-loop)
   )
